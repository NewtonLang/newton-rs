/*
 * Codegen writer for the C backend of Newton.
 * Newton (C) 2023
 */

use crate::ast::ast::*;

#[derive(Debug, Clone)]
pub struct CodegenWriter {
    output: String,
}

impl CodegenWriter {
    pub fn new() -> Self {
        Self {
            output: String::from("// This code has been automatically generated by Newton's C backend.\n")
        }
    }

    pub fn emit(&mut self, code: &String) -> () {
        self.output.push_str(code);
    }

    pub fn generate_struct(&mut self) -> () {
        self.emit(&format!("typedef struct {{\n"));

        self.emit(&format!("}};\n"));
    }

    pub fn generate_enum(&mut self) -> () {}

    pub fn generate_function(&mut self, function: &Function) -> () {
        self.emit(&format!("// {}\n", function));
        self.emit(&format!("{} {}(", function.return_type(), function.name()));

        self.emit(&format!(") {{\n"));

        self.emit(&format!("}}\n"));
    }

    pub fn generate_main_function(&mut self, main_function: &Function) -> () {
        self.emit(&format!("int main(int argc, char **argv) {{\n"));

        for _statement in main_function.body() {
            self.emit(&format!("TODO"));
        }

        self.emit(&format!("}}\n"));
    }

    pub fn generate_header(&mut self) -> () {

    }

    #[inline]
    pub fn output(&mut self) -> &String {
        &self.output
    }
}
